// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResourcePlacementAPI.Context;

namespace ResourcePlacementAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210714040313_UpdateDatabaseRelation")]
    partial class UpdateDatabaseRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ResourcePlacementAPI.Models.Accounts", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerUserId")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("tb_T_Accounts");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.AccountsRoles", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("tb_T_AccountRoles");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.CustomerUsers", b =>
                {
                    b.Property<int>("CustomerUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerUserId");

                    b.ToTable("tb_M_CustomerUsers");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("tb_M_Employees");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Participants", b =>
                {
                    b.Property<int>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantId");

                    b.HasIndex("ProjectId");

                    b.ToTable("tb_M_Participants");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.ParticipantsSkills", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("tb_M_ParticipantSkills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("tb_T_Projects");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.ProjectsSkills", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("tb_M_ProjectSkills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("tb_M_Roles");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Skills", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("tb_M_Skills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Accounts", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.CustomerUsers", "CustomerUsers")
                        .WithOne("Accounts")
                        .HasForeignKey("ResourcePlacementAPI.Models.Accounts", "CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResourcePlacementAPI.Models.Employees", "Employees")
                        .WithOne("Accounts")
                        .HasForeignKey("ResourcePlacementAPI.Models.Accounts", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUsers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.AccountsRoles", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.Accounts", "Accounts")
                        .WithMany("AccountsRoles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResourcePlacementAPI.Models.Roles", "Roles")
                        .WithMany("AccountsRoles")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Participants", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.Projects", "Projects")
                        .WithMany("Participants")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.ParticipantsSkills", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.Participants", "Participants")
                        .WithMany("ParticipantsSkills")
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResourcePlacementAPI.Models.Skills", "Skills")
                        .WithMany("ParticipantsSkills")
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participants");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Projects", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.CustomerUsers", "CustomerUsers")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUsers");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.ProjectsSkills", b =>
                {
                    b.HasOne("ResourcePlacementAPI.Models.Projects", "Projects")
                        .WithMany("ProjectsSkills")
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ResourcePlacementAPI.Models.Skills", "Skills")
                        .WithMany("ProjectsSkills")
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Accounts", b =>
                {
                    b.Navigation("AccountsRoles");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.CustomerUsers", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Employees", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Participants", b =>
                {
                    b.Navigation("ParticipantsSkills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Projects", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("ProjectsSkills");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Roles", b =>
                {
                    b.Navigation("AccountsRoles");
                });

            modelBuilder.Entity("ResourcePlacementAPI.Models.Skills", b =>
                {
                    b.Navigation("ParticipantsSkills");

                    b.Navigation("ProjectsSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
